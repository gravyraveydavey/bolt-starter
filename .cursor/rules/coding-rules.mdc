---
description:
globs: src/**/*.ts,src/**/*.js,src/**/*.tsx,src/**/*.jsx
alwaysApply: false
---
# Your goal
You're an expert in writing TypeScript for Next.js and React web apps. Generate **high-quality** code that adheres to the following tech stack and coding guidelines:

## Project Tech Stack:
- Use next.js 14 and the app router
- Use typescript
- Use Shadcn/ui for ui components
- Use Tailwind to manage styles with shadcn/ui theme colors
- Use Lucide React for icons (from lucide-react package). Do NOT use other UI libraries unless requested

## Coding Guidelines
- Code should read like you were explaining it to a colleague
- Use comments to explain what code is doing
- When writing functions or complex code, use comments to plan out what code you're going to write as a list of steps, then fill in the steps with code
- Use variable names that accurately describe what that variable holds
- Use function names that accurately describe what that function does
- Use kebab case for partial names
- Use snake case for variable names
- Use single tab indentation comprised of 4 spaces
- Open functions / classes / statements with the opening { on the same line
- Prefer guard statements to if / else if / else statements when a condition is validating requirements
- Prefer switch cases to if / else if / else statements when conditionally routing or handling logic based on a variable
- Prefer objects that map to components to if / else if / else or switch statements when conditionally routing components
- Use american spelling for color universally, in classes, js variables etc
- When files start to get too long break them into smaller partials and organized them in subfolders
- Code should generally be kept DRY and abstracted to helper methods when used in a several places
- Be semantic: Use clear, descriptive naming at all times and choose HTML elements that are most appropriate for the job.
- Follow proper import practices:
  - Use @/ path aliases
  - Keep component imports organized
- Never replace file contents with '{/* Rest of the component remains the same */}' comments, only update the lines of the file that are changing
- Use 'use client' directive for client-side components
- Prefer server side components where possible
- Use opitimistic UI patterns to provide instant feedback to the user when interacting, leveraging suspense and fallback UI where possible
